import java.util.*;

class ListNode {
    int val;
    ListNode next;
    ListNode(int x) { val = x; }
}

class TreeNode {
    int val;
    TreeNode left, right;
    TreeNode(int x) { val = x; }
}

public class Main {
    public static void main(String[] args) {
        int[] input = {-10, -3, 0, 5, 9};
        ListNode head = createLinkedList(input);
        TreeNode root = sortedListToBST(head);
        List<String> output = levelOrder(root);
        System.out.println(output);
    }

    // Create linked list from array
    public static ListNode createLinkedList(int[] arr) {
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;
        for (int v : arr) {
            curr.next = new ListNode(v);  // Fixed incomplete line here
            curr = curr.next;
        }
        return dummy.next;
    }

    // Convert sorted list to BST using recursion with head-tail boundary
    public static TreeNode sortedListToBST(ListNode head) {
        return toBST(head, null);
    }

    private static TreeNode toBST(ListNode head, ListNode tail) {
        if (head == tail) return null;

        ListNode slow = head, fast = head;
        while (fast != tail && fast.next != tail) {
            slow = slow.next;
            fast = fast.next.next;
        }

        TreeNode root = new TreeNode(slow.val);
        root.left = toBST(head, slow);
        root.right = toBST(slow.next, tail);
        return root;
    }

    // Level order traversal of tree, return list of values (with "null" for missing nodes)
    public static List<String> levelOrder(TreeNode root) {
        List<String> res = new ArrayList<>();
        if (root == null) return res;
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);

        while (!q.isEmpty()) {
            TreeNode node = q.poll();
            if (node == null) {
                res.add("null");
            } else {
                res.add(String.valueOf(node.val));
                q.offer(node.left);
                q.offer(node.right);
            }
        }

        // Remove trailing "null"s for cleaner output
        int i = res.size() - 1;
        while (i >= 0 && res.get(i).equals("null")) {
            res.remove(i--);
        }

        return res;
    }
}
